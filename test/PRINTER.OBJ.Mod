(***************************************************************************

   Input File:   test/PRINTER.OBJ
   Date/Time:    Mon Jan 11 23:42:42 2021
   -------------------------------------------------------

   Generated by Slim Binary(tm) Decoder Version 2.01

 ***************************************************************************)

MODULE Printer;    (* Slim Binary(tm) *)

  IMPORT
    Pictures, Fonts, Registry, Console, Modules;

  CONST
    Unit300 = 3048;
    defaultPrinter = "PSPrinter.Install";

  TYPE
    ARRAY4D = ARRAY 64 OF CHAR;
    Printer- = POINTER TO PrinterDesc;
    PROCEDURE8B* = PROCEDURE(P: Printer);
    ARRAYA3 = ARRAY OF CHAR;
    PROCEDURE9D* = PROCEDURE(P: Printer; printer: ARRAYA3; options: ARRAYA3);
    PROCEDUREBC* = PROCEDURE(P: Printer);
    PROCEDUREC8* = PROCEDURE(P: Printer; nofcopies: INTEGER);
    PROCEDUREDE* = PROCEDURE(P: Printer; x: INTEGER; y: INTEGER; w: INTEGER; h: INTEGER);
    PROCEDUREFA* = PROCEDURE(P: Printer; x: INTEGER; y: INTEGER; w: INTEGER; h: INTEGER; patno: INTEGER);
    PROCEDURE11F* = PROCEDURE(P: Printer; x0: INTEGER; y0: INTEGER; x1: INTEGER; y1: INTEGER);
    PROCEDURE13A* = PROCEDURE(P: Printer; x0: INTEGER; y0: INTEGER; r: INTEGER);
    PROCEDURE152* = PROCEDURE(P: Printer; x0: INTEGER; y0: INTEGER; a: INTEGER; b: INTEGER);
    ARRAY186 = ARRAY OF INTEGER;
    PROCEDURE16E* = PROCEDURE(P: Printer; x0: INTEGER; y0: INTEGER; n: INTEGER; open: INTEGER; VAR X: ARRAY186; VAR Y: ARRAY186);
    PROCEDURE196* = PROCEDURE(P: Printer; pict: Pictures.Picture; sx: INTEGER; sy: INTEGER; sw: INTEGER; sh: INTEGER; dx: INTEGER; dy: INTEGER; dw: INTEGER; dh: INTEGER; mode: INTEGER);
    ARRAY1DD = ARRAY OF CHAR;
    PROCEDURE1D7* = PROCEDURE(P: Printer; name: ARRAY1DD);
    ARRAY1FD = ARRAY OF CHAR;
    PROCEDURE1F1* = PROCEDURE(P: Printer; x: INTEGER; y: INTEGER; str: ARRAY1FD; fnt: Fonts.Font);
    ARRAY21A = ARRAY OF CHAR;
    PROCEDURE214* = PROCEDURE(P: Printer; str: ARRAY21A; fnt: Fonts.Font);
    PROCEDURE233* = PROCEDURE(P: Printer; red: INTEGER; green: INTEGER; blue: INTEGER);
    PROCEDURE256* = PROCEDURE(P: Printer; fnt: Fonts.Font): Fonts.Font;
    PrinterDesc- = RECORD
      res*: INTEGER;
      name*: ARRAY4D;
      Height*: INTEGER;
      Width*: INTEGER;
      Depth*: INTEGER;
      FrameX*: INTEGER;
      FrameY*: INTEGER;
      FrameW*: INTEGER;
      FrameH*: INTEGER;
      Unit*: LONGINT;
      InitMetrics*: PROCEDURE8B;
      Open*: PROCEDURE9D;
      Close*: PROCEDUREBC;
      Page*: PROCEDUREC8;
      ReplConst*: PROCEDUREDE;
      ReplPattern*: PROCEDUREFA;
      Line*: PROCEDURE11F;
      Circle*: PROCEDURE13A;
      Ellipse*: PROCEDURE152;
      Spline*: PROCEDURE16E;
      Picture*: PROCEDURE196;
      UseListFont*: PROCEDURE1D7;
      String*: PROCEDURE1F1;
      ContString*: PROCEDURE214;
      UseColor*: PROCEDURE233;
      GetMetric*: PROCEDURE256;
    END;
    ARRAY2BD = ARRAY OF CHAR;
    ARRAY2EF = ARRAY OF CHAR;
    ARRAY317 = ARRAY OF INTEGER;
    ARRAY3A2 = ARRAY OF CHAR;
    ARRAY40F = ARRAY OF CHAR;

  VAR
    res*: INTEGER;
    current-: Printer;
    Width*: INTEGER;
    Unit*: LONGINT;
    Height*: INTEGER;
    FrameY*: INTEGER;
    FrameX*: INTEGER;
    FrameW*: INTEGER;
    FrameH*: INTEGER;
    Depth*: INTEGER;

  (* Forward PROCEDURE declarations *)

  PROCEDURE^ Init();
  PROCEDURE^ LoadDefaultPrinter();
  PROCEDURE^ Circle*(x0: INTEGER; y0: INTEGER; r: INTEGER);
  PROCEDURE^ Close*();
  PROCEDURE^ ContString*(str: ARRAY40F; fnt: Fonts.Font);
  PROCEDURE^ Ellipse*(x0: INTEGER; y0: INTEGER; a: INTEGER; b: INTEGER);
  PROCEDURE^ GetMetric*(fnt: Fonts.Font): Fonts.Font;
  PROCEDURE^ Install*(P: Printer);
  PROCEDURE^ Line*(x0: INTEGER; y0: INTEGER; x1: INTEGER; y1: INTEGER);
  PROCEDURE^ Open*(printer: ARRAY3A2; options: ARRAY3A2);
  PROCEDURE^ Page*(nofcopies: INTEGER);
  PROCEDURE^ Picture*(P: Pictures.Picture; sx: INTEGER; sy: INTEGER; sw: INTEGER; sh: INTEGER; dx: INTEGER; dy: INTEGER; dw: INTEGER; dh: INTEGER; mode: INTEGER);
  PROCEDURE^ ReplConst*(x: INTEGER; y: INTEGER; w: INTEGER; h: INTEGER);
  PROCEDURE^ ReplPattern*(x: INTEGER; y: INTEGER; w: INTEGER; h: INTEGER; patno: INTEGER);
  PROCEDURE^ Spline*(x0: INTEGER; y0: INTEGER; n: INTEGER; open: INTEGER; VAR X: ARRAY317; VAR Y: ARRAY317);
  PROCEDURE^ String*(x: INTEGER; y: INTEGER; str: ARRAY2EF; fnt: Fonts.Font);
  PROCEDURE^ UseColor*(red: INTEGER; green: INTEGER; blue: INTEGER);
  PROCEDURE^ UseListFont*(name: ARRAY2BD);

  PROCEDURE Init();

  BEGIN  (* PROCEDURE Init *)
    Height := 0;
    Width := 0;
    Unit := 3048;
    LoadDefaultPrinter();
  END Init;


  PROCEDURE LoadDefaultPrinter();

    TYPE
      ARRAY542 = ARRAY 64 OF CHAR;
      ARRAY57B = ARRAY OF CHAR;

    VAR
      s: ARRAY542;
      defMod: ARRAY542;
      defCmd: ARRAY542;
      Mod: Modules.Module;
      Cmd: Modules.Command;


    PROCEDURE SplitName(VAR name: ARRAY57B; VAR MName: ARRAY57B; VAR PName: ARRAY57B);

      VAR
        j: INTEGER;
        i: INTEGER;

    BEGIN  (* PROCEDURE SplitName *)
      i := 0;
      WHILE (name[i] # ".") DO
        MName[i] := name[i];
        INC(i, 1);
      END;  (* WHILE *)
      MName[i] := 000X;
      INC(i, 1);
      j := 0;
      WHILE (name[i] # 000X) DO
        PName[j] := name[i];
        INC(i, 1);
        INC(j, 1);
      END;  (* WHILE *)
      PName[j] := 000X;
    END SplitName;


  BEGIN  (* PROCEDURE LoadDefaultPrinter *)
    current := NIL;
    Registry.Get("System", "DefaultPrinter", s);
    IF (Registry.res # 0) THEN
      COPY("PSPrinter.Install", s);
    END;  (* IF *)
    SplitName(s, defMod, defCmd);
    Mod := Modules.ThisMod(defMod);
    IF (Modules.res = 0) THEN
      Cmd := Modules.ThisCommand(Mod, defCmd);
      IF (Modules.res = 0) THEN
        Cmd();
      END;  (* IF *)
    ELSE
      Console.Str("Printer.LoadDefaultPrinter ");
      Console.Str(s);
      Console.Str(" not found");
      Console.Ln();
      Mod := Modules.ThisMod("WinPrinter");
      IF (Modules.res = 0) THEN
        Cmd := Modules.ThisCommand(Mod, "Install");
        IF (Modules.res = 0) THEN
          Cmd();
        END;  (* IF *)
      END;  (* IF *)
    END;  (* IF *)
  END LoadDefaultPrinter;


  PROCEDURE Circle*(x0: INTEGER; y0: INTEGER; r: INTEGER);

  BEGIN  (* PROCEDURE Circle *)
    current^.Circle(current, x0, y0, r);
  END Circle;


  PROCEDURE Close*();

    VAR
      P: Printer;

  BEGIN  (* PROCEDURE Close *)
    ASSERT((current # NIL), 100);
    P := current;
    P^.Close(P);
    Width := P^.Width;
    Height := P^.Height;
    Depth := P^.Depth;
    FrameX := P^.FrameX;
    FrameY := P^.FrameY;
    FrameW := P^.FrameW;
    FrameH := P^.FrameH;
    Unit := P^.Unit;
  END Close;


  PROCEDURE ContString*(str: ARRAY40F; fnt: Fonts.Font);

  BEGIN  (* PROCEDURE ContString *)
    current^.ContString(current, str, fnt);
  END ContString;


  PROCEDURE Ellipse*(x0: INTEGER; y0: INTEGER; a: INTEGER; b: INTEGER);

  BEGIN  (* PROCEDURE Ellipse *)
    current^.Ellipse(current, x0, y0, a, b);
  END Ellipse;


  PROCEDURE GetMetric*(fnt: Fonts.Font): Fonts.Font;

  BEGIN  (* PROCEDURE GetMetric *)
    RETURN current^.GetMetric(current, fnt);
  END GetMetric;


  PROCEDURE Install*(P: Printer);

  BEGIN  (* PROCEDURE Install *)
    ASSERT((P # NIL), 100);
    P^.InitMetrics(P);
    Width := P^.Width;
    Height := P^.Height;
    Depth := P^.Depth;
    FrameX := P^.FrameX;
    FrameY := P^.FrameY;
    FrameW := P^.FrameW;
    FrameH := P^.FrameH;
    Unit := P^.Unit;
    current := P;
  END Install;


  PROCEDURE Line*(x0: INTEGER; y0: INTEGER; x1: INTEGER; y1: INTEGER);

  BEGIN  (* PROCEDURE Line *)
    current^.Line(current, x0, y0, x1, y1);
  END Line;


  PROCEDURE Open*(printer: ARRAY3A2; options: ARRAY3A2);

    VAR
      P: Printer;

  BEGIN  (* PROCEDURE Open *)
    res := 1;
    IF (current = NIL) THEN
      RETURN;
    END;  (* IF *)
    P := current;
    P^.Open(P, printer, options);
    res := P^.res;
    Width := P^.Width;
    Height := P^.Height;
    Depth := P^.Depth;
    FrameX := P^.FrameX;
    FrameY := P^.FrameY;
    FrameW := P^.FrameW;
    FrameH := P^.FrameH;
    Unit := P^.Unit;
  END Open;


  PROCEDURE Page*(nofcopies: INTEGER);

  BEGIN  (* PROCEDURE Page *)
    current^.Page(current, nofcopies);
  END Page;


  PROCEDURE Picture*(P: Pictures.Picture; sx: INTEGER; sy: INTEGER; sw: INTEGER; sh: INTEGER; dx: INTEGER; dy: INTEGER; dw: INTEGER; dh: INTEGER; mode: INTEGER);

  BEGIN  (* PROCEDURE Picture *)
    current^.Picture(current, P, sx, sy, sw, sh, dx, dy, dw, dh, mode);
  END Picture;


  PROCEDURE ReplConst*(x: INTEGER; y: INTEGER; w: INTEGER; h: INTEGER);

  BEGIN  (* PROCEDURE ReplConst *)
    current^.ReplConst(current, x, y, w, h);
  END ReplConst;


  PROCEDURE ReplPattern*(x: INTEGER; y: INTEGER; w: INTEGER; h: INTEGER; patno: INTEGER);

  BEGIN  (* PROCEDURE ReplPattern *)
    current^.ReplPattern(current, x, y, w, h, patno);
  END ReplPattern;


  PROCEDURE Spline*(x0: INTEGER; y0: INTEGER; n: INTEGER; open: INTEGER; VAR X: ARRAY317; VAR Y: ARRAY317);

  BEGIN  (* PROCEDURE Spline *)
    current^.Spline(current, x0, y0, n, open, X, Y);
  END Spline;


  PROCEDURE String*(x: INTEGER; y: INTEGER; str: ARRAY2EF; fnt: Fonts.Font);

  BEGIN  (* PROCEDURE String *)
    current^.String(current, x, y, str, fnt);
  END String;


  PROCEDURE UseColor*(red: INTEGER; green: INTEGER; blue: INTEGER);

  BEGIN  (* PROCEDURE UseColor *)
    current^.UseColor(current, red, green, blue);
  END UseColor;


  PROCEDURE UseListFont*(name: ARRAY2BD);

  BEGIN  (* PROCEDURE UseListFont *)
    current^.UseListFont(current, name);
  END UseListFont;


BEGIN  (* MODULE Printer *)
  Init();
END Printer.
