/******************************************************************************
 * sb1d.cpp                                                                   *
 *                                                                            *
 * The SlimBinary(tm) Decoder                                                 *
 *                                                                            *
 * Copyright (c) 1997-1999 by the Regents of the University of California     *
 * Copyright (c) 2000-2020 by Ziemowit Laski                                  *
 *                                                                            *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND  WITHOUT  ANY  EXPRESSED  OR       *
 * IMPLIED  WARRANTIES,  INCLUDING,  WITHOUT LIMITATION, THE IMPLIED          *
 * WARRANTIES  OF  MERCHANTABILITY  AND  FITNESS  FOR  A  PARTICULAR          *
 * PURPOSE.                                                                   *
 *                                                                            *
 *****************************************************************************/

#include <iostream>
using namespace std;

#include "slim_binary.h"
using namespace juice;

#include "stream.h"
#include "time.h"

string path, filename, ext;

void print_disclaimer(ostream &fout) {
   fout << "(***************************************************************************\n\n";
   fout << "   Input File:   " << filename << "\n";
   fout << "   Date/Time:    " << current_date_and_time() << "\n";
   fout << "   -------------------------------------------------------\n\n";
   fout << "   Generated by " SLIMBIN " Decoder Version " SB1D_VERSION "\n";
   fout << "\n";
   fout << " ***************************************************************************)\n\n";
}


int main(int argc, char *argv[]) {
   cout << SLIMBIN " Decoder Version " SB1D_VERSION "\n";
   cout << "(C) Copyright 1997-1999 Regents of the University of California\n";
   cout << "(C) Copyright 2000-2020 Ziemowit Laski\n\n";
   if(argc < 2 || argv[1][0] == '-' && argc < 3) {
      cout << "   Usage: sb1d [-r[aw]] [path]filename\n\n";
      cout << "   Imported modules (.OBJ, .OBK, etc.) must reside in the same directory\n";
      cout << "   as the main module.  (The " FILEDIR_FILE " module-mapping file will be\n";
      cout << "   used if present.)  The \'raw\' option activates a complete\n";
      cout << "   (and usually huge) dump of the decoder's internal data\n";
      cout << "   store (.RAW).  Otherwise, an Oberon-2 source program (.MOD)\n";
      cout << "   is generated.  In either case, the output is written into the\n";
      cout << "   current directory.\n";
      return 1;
   }
   bool print_raw;
   if(argv[1][0] == '-') {
      print_raw = (argv[1][1] == 'r');
      filename = argv[2];
   }
   else {
      print_raw = false;
      filename = argv[1];
   }
   split_filename(path, filename);

   slim_binary my_binary;

   my_binary.set_directory(path);
   cout << "Reading file(s) . . . \n";
   bool success = my_binary.read(filename);
   if (!success) {
       return 1;
   }

   filename = capitalize(filename);
   string outname = filename + (print_raw? ".RAW": ".MOD");
   ofstream fout(outname.c_str());
   if(!fout.is_open()) {
      cout << "Fatal: Could not open \'" << outname << "\' for output\n";
      return 1;
   }

   if(print_raw || success) {
     cout << "Writing results . . . \n";
     print_disclaimer(fout);
   }

   if(print_raw) {
      my_binary.print(fout);
      cout << "Raw data written to \'" << outname << "\'\n";
   }
   else if(success) {
      my_binary.pretty_print(fout);
      cout << "Decompiled source code written to \'" << outname << "\'\n";
   }
   fout.close();

   return (success? 0: 1);
}
